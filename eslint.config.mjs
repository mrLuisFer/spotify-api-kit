import typescriptEslint from "@typescript-eslint/eslint-plugin";
import globals from "globals";
import tsParser from "@typescript-eslint/parser";
import path from "node:path";
import { fileURLToPath } from "node:url";
import js from "@eslint/js";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
  baseDirectory: __dirname,
  recommendedConfig: js.configs.recommended,
  allConfig: js.configs.all,
});

export default [
  {
    ignores: [
      "**/*.psd",
      "**/*.ai",
      "**/*.indd",
      "**/*.prproj",
      "**/*.aep",
      "**/logs",
      "**/*.log",
      "**/npm-debug.log*",
      "**/yarn-debug.log*",
      "**/yarn-error.log*",
      "**/lerna-debug.log*",
      "**/.pnpm-debug.log*",
      "**/package-lock.json",
      "**/report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json",
      "**/pids",
      "**/*.pid",
      "**/*.seed",
      "**/*.pid.lock",
      "**/lib-cov",
      "**/coverage",
      "**/*.lcov",
      "**/.nyc_output",
      "**/.grunt",
      "**/bower_components",
      "**/.lock-wscript",
      "build/Release",
      "**/node_modules/",
      "**/jspm_packages/",
      "**/web_modules/",
      "**/*.tsbuildinfo",
      "**/.npm",
      "**/.eslintcache",
      "**/.stylelintcache",
      "**/.rpt2_cache/",
      "**/.rts2_cache_cjs/",
      "**/.rts2_cache_es/",
      "**/.rts2_cache_umd/",
      "**/.node_repl_history",
      "**/*.tgz",
      "**/.yarn-integrity",
      "**/.env",
      "**/.env.development.local",
      "**/.env.test.local",
      "**/.env.production.local",
      "**/.env.local",
      "**/.parcel-cache",
      "**/.next",
      "**/.nuxt",
      "**/dist",
      ".vuepress/dist",
      "**/.temp",
      "**/.docusaurus",
      "**/.serverless/",
      "**/.fusebox/",
      "**/.dynamodb/",
      "**/.tern-port",
      "**/.vscode-test",
      ".yarn/cache",
      ".yarn/unplugged",
      ".yarn/build-state.yml",
      ".yarn/install-state.gz",
      "**/.pnp.*",
      "**/.webpack/",
      "**/.svelte-kit",
      "**/.DS_*",
      "**/*.backup.*",
      "**/*.back.*",
      "**/*.sublime*",
      "**/psd",
      "**/thumb",
      "**/sketch",
      "**/.expo",
      "**/__generated__",
      "**/.DS_Store",
      "**/.AppleDouble",
      "**/.LSOverride",
      "**/Icon",
      "**/._*",
      "**/.DocumentRevisions-V100",
      "**/.fseventsd",
      "**/.Spotlight-V100",
      "**/.TemporaryItems",
      "**/.Trashes",
      "**/.VolumeIcon.icns",
      "**/.com.apple.timemachine.donotpresent",
      "**/.AppleDB",
      "**/.AppleDesktop",
      "**/Network Trash Folder",
      "**/Temporary Items",
      "**/.apdisk",
      "**/.gradle/",
      "**/local.properties",
      "**/captures/",
      "**/.externalNativeBuild/",
      "**/.cxx/",
      "**/*.apk",
      "**/output.json",
      "**/.idea/",
      "**/misc.xml",
      "**/deploymentTargetDropDown.xml",
      "**/render.experimental.xml",
      "**/*.jks",
      "**/*.keystore",
      "**/google-services.json",
      "**/*.hprof",
      "**/xcuserdata/",
      "**/*.xcscmblueprint",
      "**/*.xccheckout",
      "**/buck-out/",
      "**/.buckconfig.local",
      "**/.buckd/",
      "**/.buckversion",
      "**/.fakebuckversion",
      "**/.gradle",
      "!src/**/build/",
      "**/gradle-app.setting",
      "!**/gradle-wrapper.jar",
      "!**/gradle-wrapper.properties",
      "**/.gradletasknamecache",
      "**/.project",
      "**/.classpath",
      "**/*~",
      "**/.fuse_hidden*",
      "**/.directory",
      "**/.Trash-*",
      "**/.nfs*",
      "**/.sass-cache/",
      "**/*.css.map",
      "**/*.sass.map",
      "**/*.scss.map",
    ],
  },
  ...compat.extends(
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
  ),
  {
    plugins: {
      "@typescript-eslint": typescriptEslint,
    },

    languageOptions: {
      globals: {
        ...globals.browser,
        ...globals.node,
      },

      parser: tsParser,
      ecmaVersion: "latest",
      sourceType: "module",
    },

    rules: {},
  },
];
